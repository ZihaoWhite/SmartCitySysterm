/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.smartcity.smartcitysys;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import generated.smartcity.lighting.LightRequest;
import generated.smartcity.lighting.LightResponse;
import generated.smartcity.lighting.SmartLightingServiceGrpc;
import generated.smartcity.lighting.SmartLightingServiceGrpc;
import generated.smartcity.lighting.StatusRequest;
import generated.smartcity.lighting.LightStatus;
import io.grpc.stub.StreamObserver;
import java.util.ArrayList;
import java.util.List;
import generated.smartcity.lighting.BrightnessLevel;
import generated.smartcity.lighting.AdjustmentSummary;
import generated.smartcity.lighting.LightingCommand;
import generated.smartcity.lighting.LightingFeedback;
import generated.smartcity.airquality.AirQualityServiceGrpc;
import generated.smartcity.airquality.LocationRequest;
import generated.smartcity.airquality.AirStatus;
import generated.smartcity.airquality.LocationRequest;
import generated.smartcity.airquality.AirStatus;
import generated.smartcity.airquality.SensorReading;
import generated.smartcity.airquality.SensorReport;
import generated.smartcity.publicdisplay.DisplayMessage;
import generated.smartcity.publicdisplay.DisplayAck;
import generated.smartcity.publicdisplay.DisplayStatus;
import generated.smartcity.publicdisplay.PublicDisplayServiceGrpc;
import generated.smartcity.publicdisplay.DisplayMessage;
import generated.smartcity.publicdisplay.DisplaySummary;
import io.grpc.stub.StreamObserver;
import java.util.Properties;
import java.io.InputStream;
import java.io.IOException;


/**
 *
 * @author zihaobai
 */
public class SmartCityClientGUI extends javax.swing.JFrame {
    private SmartLightingServiceGrpc.SmartLightingServiceBlockingStub lightingStub;
    private List<BrightnessLevel> brightnessRequests = new ArrayList<>();
    private SmartLightingServiceGrpc.SmartLightingServiceStub lightingAsyncStub;
    private StreamObserver<LightingCommand> liveCommandStream;
    private AirQualityServiceGrpc.AirQualityServiceBlockingStub airStub;
    private List<SensorReading> sensorReadings = new ArrayList<>();
    private AirQualityServiceGrpc.AirQualityServiceStub airAsyncStub;
    private StreamObserver<SensorReading> liveSensorStream = null;
    private List<DisplayMessage> displayBatch = new ArrayList<>();
    private StreamObserver<DisplayMessage> liveDisplayStream = null;
    private PublicDisplayServiceGrpc.PublicDisplayServiceStub publicAsyncStub;
    
    private ManagedChannel getChannelFromConfig(String serviceName) {
        try {
            Properties props = new Properties();
            InputStream in = getClass().getClassLoader().getResourceAsStream("services.properties");
            if (in == null) {
                throw new RuntimeException("Configuration file 'services.properties' not found!");
            }
            props.load(in);
            in.close();

            String target = props.getProperty(serviceName);
            if (target == null) {
                throw new RuntimeException("Service' " + serviceName + "' is not defined in the configuration file!");
            }

            return ManagedChannelBuilder.forTarget(target)
                    .usePlaintext()
                    .build();

        } catch (IOException e) {
            throw new RuntimeException("Failed to read configuration file: " + e.getMessage());
        }
}
    /**
     * Creates new form SmartCityClientGUI
     */
    public SmartCityClientGUI() {
        initComponents();
        ManagedChannel channel = getChannelFromConfig("lighting");
        ManagedChannel channelAQ = getChannelFromConfig("airquality");
        ManagedChannel channelDisplay = getChannelFromConfig("display");




        


    lightingStub = SmartLightingServiceGrpc.newBlockingStub(channel);
    lightingAsyncStub = SmartLightingServiceGrpc.newStub(channel);
    airStub = AirQualityServiceGrpc.newBlockingStub(channelAQ);
    airAsyncStub = AirQualityServiceGrpc.newStub(channelAQ);
    publicAsyncStub = PublicDisplayServiceGrpc.newStub(channelDisplay);
    
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SmartCitySys = new javax.swing.JTabbedPane();
        lightingPanel = new javax.swing.JPanel();
        lblLightID = new javax.swing.JLabel();
        txtLightIdUnary = new javax.swing.JTextField();
        lblLocation = new javax.swing.JLabel();
        txtLocationUnary = new javax.swing.JTextField();
        btnTurnOnLight = new javax.swing.JButton();
        lblResponse = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResponseUnary = new javax.swing.JTextArea();
        lblAreaId = new javax.swing.JLabel();
        txtAreaId = new javax.swing.JTextField();
        btnStreamStatus = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtStatusStream = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        lblBrightnessLightId = new javax.swing.JLabel();
        txtBrightnessLightId = new javax.swing.JTextField();
        lblBrightness = new javax.swing.JLabel();
        txtBrightnessLevel = new javax.swing.JTextField();
        btnAddBrightness = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtBrightnessResponse = new javax.swing.JTextArea();
        btnSubmitBrightness = new javax.swing.JButton();
        lblLiveId = new javax.swing.JLabel();
        txtLiveLightId = new javax.swing.JTextField();
        lblLiveCmd = new javax.swing.JLabel();
        txtLiveCommand = new javax.swing.JTextField();
        btnSendCommand = new javax.swing.JButton();
        lblLiveFeedback = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtLiveFeedback = new javax.swing.JTextArea();
        jLabel19 = new javax.swing.JLabel();
        txtApiKeyLighting = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        lblLocationAQ = new javax.swing.JLabel();
        txtLocationAQ = new javax.swing.JTextField();
        btnGetAirStatus = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtAirStatusResponse = new javax.swing.JTextArea();
        lblStreamCity = new javax.swing.JLabel();
        txtStreamCity = new javax.swing.JTextField();
        btnStreamAir = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtStreamAirResponse = new javax.swing.JTextArea();
        lblSensorPm25 = new javax.swing.JLabel();
        txtSensorPm25 = new javax.swing.JTextField();
        lblSensorCo2 = new javax.swing.JLabel();
        txtSensorCo2 = new javax.swing.JTextField();
        btnAddSensorReading = new javax.swing.JButton();
        btnSubmitSensorReadings = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        txtSensorUploadResponse = new javax.swing.JTextArea();
        lblLiveTemp = new javax.swing.JLabel();
        txtLiveTemp = new javax.swing.JTextField();
        lblLiveHum = new javax.swing.JLabel();
        txtLiveHum = new javax.swing.JTextField();
        lblLivePm25 = new javax.swing.JLabel();
        txtLivePm25 = new javax.swing.JTextField();
        blbLiveCo2 = new javax.swing.JLabel();
        txtLiveCo2 = new javax.swing.JTextField();
        btnSendLive = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        txtLiveResponse = new javax.swing.JTextArea();
        jLabelApiKeyAQ = new javax.swing.JLabel();
        txtApiKeyAQ = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtScreenIdUnary = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtContentUnary = new javax.swing.JTextField();
        cmbPriorityUnary = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        btnSendMessage = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        txtUnaryResponse = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        txtStreamScreenId = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtStreamContent = new javax.swing.JTextField();
        cmbStreamPriority = new javax.swing.JComboBox<>();
        btnAddToBatch = new javax.swing.JButton();
        btnSubmitBatch = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        txtStreamResponse = new javax.swing.JTextArea();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtLiveScreenId = new javax.swing.JTextField();
        txtLiveContent = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        cmbLivePriority = new javax.swing.JComboBox<>();
        btnSendLiveDisplay = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        txtLiveDisplayResponse = new javax.swing.JTextArea();
        jLabel20 = new javax.swing.JLabel();
        txtApiKeyPD = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblLightID.setText("Light ID:");

        lblLocation.setText("Location:");

        txtLocationUnary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLocationUnaryActionPerformed(evt);
            }
        });

        btnTurnOnLight.setBackground(new java.awt.Color(51, 255, 255));
        btnTurnOnLight.setText("Turn On Light");
        btnTurnOnLight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTurnOnLightActionPerformed(evt);
            }
        });

        lblResponse.setText("Response:");

        txtResponseUnary.setColumns(20);
        txtResponseUnary.setRows(5);
        jScrollPane1.setViewportView(txtResponseUnary);

        lblAreaId.setText("Area ID:");

        btnStreamStatus.setBackground(new java.awt.Color(153, 153, 255));
        btnStreamStatus.setText("Stream Light Status");
        btnStreamStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStreamStatusActionPerformed(evt);
            }
        });

        txtStatusStream.setColumns(20);
        txtStatusStream.setRows(5);
        jScrollPane2.setViewportView(txtStatusStream);

        jLabel1.setText("Feedback:");

        lblBrightnessLightId.setText("Light ID: ");

        txtBrightnessLightId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBrightnessLightIdActionPerformed(evt);
            }
        });

        lblBrightness.setText("Brightness:");

        txtBrightnessLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBrightnessLevelActionPerformed(evt);
            }
        });

        btnAddBrightness.setBackground(new java.awt.Color(102, 204, 255));
        btnAddBrightness.setText("Add Brightness Entry");
        btnAddBrightness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddBrightnessActionPerformed(evt);
            }
        });

        jLabel4.setText("Response:");

        txtBrightnessResponse.setColumns(20);
        txtBrightnessResponse.setRows(5);
        jScrollPane3.setViewportView(txtBrightnessResponse);

        btnSubmitBrightness.setBackground(new java.awt.Color(153, 204, 255));
        btnSubmitBrightness.setText("Submit Adjustments");
        btnSubmitBrightness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitBrightnessActionPerformed(evt);
            }
        });

        lblLiveId.setText("Light ID:");

        txtLiveLightId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLiveLightIdActionPerformed(evt);
            }
        });

        lblLiveCmd.setText("Command:");

        btnSendCommand.setBackground(new java.awt.Color(153, 255, 153));
        btnSendCommand.setText("Send Command");
        btnSendCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendCommandActionPerformed(evt);
            }
        });

        lblLiveFeedback.setText("Feedback:");

        txtLiveFeedback.setColumns(20);
        txtLiveFeedback.setRows(5);
        jScrollPane4.setViewportView(txtLiveFeedback);

        jLabel19.setText("API Key:");

        txtApiKeyLighting.setForeground(new java.awt.Color(255, 51, 153));
        txtApiKeyLighting.setCaretColor(new java.awt.Color(255, 51, 255));
        txtApiKeyLighting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtApiKeyLightingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout lightingPanelLayout = new javax.swing.GroupLayout(lightingPanel);
        lightingPanel.setLayout(lightingPanelLayout);
        lightingPanelLayout.setHorizontalGroup(
            lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lightingPanelLayout.createSequentialGroup()
                .addGroup(lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(lightingPanelLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblLocation)
                            .addComponent(lblResponse)
                            .addComponent(lblLightID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txtLocationUnary, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtLightIdUnary, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(lightingPanelLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(btnTurnOnLight)
                        .addGap(169, 169, 169)
                        .addGroup(lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(lightingPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lightingPanelLayout.createSequentialGroup()
                                .addComponent(btnStreamStatus)
                                .addGap(68, 68, 68))
                            .addGroup(lightingPanelLayout.createSequentialGroup()
                                .addComponent(lblAreaId)
                                .addGap(18, 18, 18)
                                .addComponent(txtAreaId, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lightingPanelLayout.createSequentialGroup()
                        .addComponent(lblBrightnessLightId)
                        .addGap(27, 27, 27)
                        .addComponent(txtBrightnessLightId, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55))
                    .addGroup(lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(lightingPanelLayout.createSequentialGroup()
                            .addGroup(lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnAddBrightness)
                                .addGroup(lightingPanelLayout.createSequentialGroup()
                                    .addComponent(lblBrightness)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtBrightnessLevel)))
                            .addGap(38, 38, 38))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, lightingPanelLayout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addGap(18, 18, 18)
                            .addGroup(lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnSubmitBrightness, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLiveCmd, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblLiveFeedback)
                    .addComponent(lblLiveId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSendCommand)
                    .addComponent(txtLiveLightId)
                    .addComponent(txtLiveCommand)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)))
            .addGroup(lightingPanelLayout.createSequentialGroup()
                .addGap(555, 555, 555)
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtApiKeyLighting, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(627, Short.MAX_VALUE))
        );
        lightingPanelLayout.setVerticalGroup(
            lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lightingPanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(lightingPanelLayout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBrightness)
                            .addComponent(txtBrightnessLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(lightingPanelLayout.createSequentialGroup()
                        .addGroup(lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLightID)
                            .addComponent(lblAreaId)
                            .addComponent(txtLightIdUnary)
                            .addComponent(txtAreaId, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBrightnessLightId)
                            .addComponent(txtBrightnessLightId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLiveId)
                            .addComponent(txtLiveLightId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(lightingPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblLocation)
                                    .addComponent(txtLocationUnary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(lightingPanelLayout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtLiveCommand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblLiveCmd))))
                        .addGroup(lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(lightingPanelLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnStreamStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnAddBrightness)
                                    .addComponent(btnTurnOnLight))
                                .addGap(18, 18, 18)
                                .addComponent(btnSubmitBrightness))
                            .addGroup(lightingPanelLayout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(btnSendCommand)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, Short.MAX_VALUE)))
                .addGroup(lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(lightingPanelLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(lblResponse)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(lightingPanelLayout.createSequentialGroup()
                            .addComponent(lblLiveFeedback)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(lightingPanelLayout.createSequentialGroup()
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addGap(1, 1, 1))))
                .addGap(55, 55, 55)
                .addGroup(lightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtApiKeyLighting, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(76, 76, 76))
        );

        SmartCitySys.addTab("Lighting", lightingPanel);

        lblLocationAQ.setText("Location: ");

        btnGetAirStatus.setBackground(new java.awt.Color(153, 255, 255));
        btnGetAirStatus.setText("Get Air Status");
        btnGetAirStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetAirStatusActionPerformed(evt);
            }
        });

        jLabel3.setText("Response:");

        txtAirStatusResponse.setColumns(20);
        txtAirStatusResponse.setRows(5);
        jScrollPane5.setViewportView(txtAirStatusResponse);

        lblStreamCity.setText("City：");

        btnStreamAir.setBackground(new java.awt.Color(255, 255, 204));
        btnStreamAir.setText("Stream Air Quality");
        btnStreamAir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStreamAirActionPerformed(evt);
            }
        });

        jLabel5.setText("Response:");

        txtStreamAirResponse.setColumns(20);
        txtStreamAirResponse.setRows(5);
        jScrollPane6.setViewportView(txtStreamAirResponse);

        lblSensorPm25.setText("PM2.5:");

        txtSensorPm25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSensorPm25ActionPerformed(evt);
            }
        });

        lblSensorCo2.setText("CO2:");

        txtSensorCo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSensorCo2ActionPerformed(evt);
            }
        });

        btnAddSensorReading.setBackground(new java.awt.Color(255, 255, 51));
        btnAddSensorReading.setText("Add Sensor Reading");
        btnAddSensorReading.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSensorReadingActionPerformed(evt);
            }
        });

        btnSubmitSensorReadings.setBackground(new java.awt.Color(153, 204, 255));
        btnSubmitSensorReadings.setText("Submit Data");
        btnSubmitSensorReadings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitSensorReadingsActionPerformed(evt);
            }
        });

        jLabel2.setText("Response:");

        txtSensorUploadResponse.setColumns(20);
        txtSensorUploadResponse.setRows(5);
        jScrollPane7.setViewportView(txtSensorUploadResponse);

        lblLiveTemp.setText("Temperature:");

        lblLiveHum.setText("Humidity:");

        lblLivePm25.setText("PM2.5:");

        blbLiveCo2.setText("CO2:");

        btnSendLive.setBackground(new java.awt.Color(204, 255, 102));
        btnSendLive.setText("Send Reading");
        btnSendLive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendLiveActionPerformed(evt);
            }
        });

        jLabel10.setText("Response:");

        txtLiveResponse.setColumns(20);
        txtLiveResponse.setRows(5);
        jScrollPane8.setViewportView(txtLiveResponse);

        jLabelApiKeyAQ.setText("API Key:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblLocationAQ)
                                    .addComponent(jLabelApiKeyAQ))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtLocationAQ, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                                    .addComponent(txtApiKeyAQ))))
                        .addGap(65, 65, 65)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblStreamCity)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtStreamCity, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(btnGetAirStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnStreamAir)
                        .addGap(20, 20, 20)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(lblSensorPm25)
                        .addGap(18, 18, 18)
                        .addComponent(txtSensorPm25, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(lblSensorCo2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtSensorCo2, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(btnAddSensorReading)
                                .addGap(54, 54, 54)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(82, 82, 82)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblLiveHum)
                                    .addComponent(lblLivePm25)
                                    .addComponent(blbLiveCo2)
                                    .addComponent(lblLiveTemp))
                                .addGap(35, 35, 35)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtLivePm25, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtLiveCo2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtLiveHum, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtLiveTemp, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(33, 33, 33)
                                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(31, 31, 31))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnSendLive)
                                        .addGap(154, 154, 154))))))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(735, 735, 735)
                .addComponent(btnSubmitSensorReadings)
                .addContainerGap(577, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(197, 197, 197)
                            .addComponent(btnAddSensorReading))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtLiveHum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblLiveHum))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtLivePm25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblLivePm25))
                            .addGap(22, 22, 22)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelApiKeyAQ)
                            .addComponent(txtApiKeyAQ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtStreamCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblStreamCity)
                                    .addComponent(txtLocationAQ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblLocationAQ)
                                    .addComponent(txtSensorPm25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblSensorPm25)
                                    .addComponent(lblLiveTemp)
                                    .addComponent(txtLiveTemp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(60, 60, 60)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnGetAirStatus)
                                    .addComponent(btnStreamAir))
                                .addGap(35, 35, 35))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblSensorCo2)
                                    .addComponent(txtSensorCo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(57, 57, 57)))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                            .addComponent(jScrollPane6))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(btnSubmitSensorReadings))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtLiveCo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(blbLiveCo2))
                                .addGap(10, 10, 10)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(btnSendLive)
                                .addGap(26, 26, 26)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 42, Short.MAX_VALUE))))
        );

        SmartCitySys.addTab("AirQuality", jPanel1);

        jLabel6.setText("Screen ID:");

        jLabel7.setText("Content:");

        txtContentUnary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtContentUnaryActionPerformed(evt);
            }
        });

        cmbPriorityUnary.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "normal", "high", "emergency" }));
        cmbPriorityUnary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPriorityUnaryActionPerformed(evt);
            }
        });

        jLabel8.setText("Priority:");

        btnSendMessage.setBackground(new java.awt.Color(255, 153, 153));
        btnSendMessage.setText("Send Message");
        btnSendMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendMessageActionPerformed(evt);
            }
        });

        jLabel9.setText("Response:");

        txtUnaryResponse.setColumns(20);
        txtUnaryResponse.setRows(5);
        jScrollPane9.setViewportView(txtUnaryResponse);

        jLabel11.setText("Screen ID:");

        jLabel12.setText("Content:");

        jLabel13.setText("Priority:");

        cmbStreamPriority.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "normal", "high", "emergency", " " }));

        btnAddToBatch.setBackground(new java.awt.Color(153, 255, 255));
        btnAddToBatch.setText("Add to Batch");
        btnAddToBatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToBatchActionPerformed(evt);
            }
        });

        btnSubmitBatch.setBackground(new java.awt.Color(255, 255, 51));
        btnSubmitBatch.setText("Submit All");
        btnSubmitBatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitBatchActionPerformed(evt);
            }
        });

        jLabel14.setText("Response:");

        txtStreamResponse.setColumns(20);
        txtStreamResponse.setRows(5);
        jScrollPane10.setViewportView(txtStreamResponse);

        jLabel15.setText("Screen ID:");

        jLabel16.setText("Content:");

        jLabel17.setText("Priority:");

        cmbLivePriority.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "normal ", "high ", "emergency" }));

        btnSendLiveDisplay.setBackground(new java.awt.Color(153, 255, 102));
        btnSendLiveDisplay.setText("Send Live");
        btnSendLiveDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendLiveDisplayActionPerformed(evt);
            }
        });

        jLabel18.setText("Response:");

        txtLiveDisplayResponse.setColumns(20);
        txtLiveDisplayResponse.setRows(5);
        jScrollPane11.setViewportView(txtLiveDisplayResponse);

        jLabel20.setText("API Key:");

        txtApiKeyPD.setForeground(new java.awt.Color(255, 51, 153));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel7)
                        .addComponent(jLabel6)
                        .addComponent(jLabel8))
                    .addComponent(jLabel9))
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtScreenIdUnary, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtContentUnary, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cmbPriorityUnary, javax.swing.GroupLayout.Alignment.LEADING, 0, 168, Short.MAX_VALUE)))
                                .addGap(174, 174, 174)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel14)))
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(70, 70, 70)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(cmbStreamPriority, javax.swing.GroupLayout.Alignment.LEADING, 0, 148, Short.MAX_VALUE)
                                .addComponent(txtStreamContent, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtStreamScreenId, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtApiKeyPD, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(138, 138, 138)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel17)
                                .addComponent(jLabel16))
                            .addComponent(jLabel15))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtLiveScreenId, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLiveContent, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnSendLiveDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cmbLivePriority, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(102, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnSendMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSubmitBatch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAddToBatch, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(662, 662, 662))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(527, 527, 527)
                .addComponent(jLabel20)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20)
                            .addComponent(txtApiKeyPD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(txtStreamScreenId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)
                            .addComponent(txtLiveScreenId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtScreenIdUnary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtContentUnary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(txtStreamContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtLiveContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16))
                        .addGap(23, 23, 23)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbPriorityUnary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel13)
                    .addComponent(cmbStreamPriority, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(49, 49, 49)
                            .addComponent(btnSendMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(62, 62, 62))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addGap(38, 38, 38)
                            .addComponent(btnAddToBatch, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnSubmitBatch, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(6, 6, 6)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(cmbLivePriority, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSendLiveDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addGap(1, 1, 1)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 38, Short.MAX_VALUE))
                    .addComponent(jScrollPane11))
                .addContainerGap())
        );

        SmartCitySys.addTab("PublicDisplay", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SmartCitySys, javax.swing.GroupLayout.PREFERRED_SIZE, 1402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(SmartCitySys, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTurnOnLightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTurnOnLightActionPerformed
            String lightId = txtLightIdUnary.getText().trim();
            String location = txtLocationUnary.getText().trim();
            String apiKey = txtApiKeyLighting.getText().trim();
            if (lightId.isEmpty() || location.isEmpty() || apiKey.isEmpty()) {
                txtResponseUnary.setText("Please fill in Light ID, Location, and API Key!");
                return;
            }

            LightRequest request = LightRequest.newBuilder()
                .setLightId(lightId)
                .setLocation(location)
                .setApiKey(apiKey) // ADD API Key
                .build();

            try {
                LightResponse response = lightingStub.turnOnLight(request);

                txtResponseUnary.setText(
                    " Success: " + response.getSuccess() + 
                    "\n Message: " + response.getMessage()
                );
            } catch (Exception e) {
                    txtResponseUnary.setText("Error: " + e.getMessage());
                    e.printStackTrace();
    }
            
    }//GEN-LAST:event_btnTurnOnLightActionPerformed

    private void txtLocationUnaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLocationUnaryActionPerformed
        
    }//GEN-LAST:event_txtLocationUnaryActionPerformed

    private void btnStreamStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStreamStatusActionPerformed
        String areaId = txtAreaId.getText().trim();
        String apiKey = txtApiKeyLighting.getText().trim(); // Retrieve API Key
        txtStatusStream.setText(""); //clear previous content
        
        if (areaId.isEmpty() || apiKey.isEmpty()) {
            txtStatusStream.setText("Please enter Area ID and API Key");
            return;
        }

        // Build the request 
        StatusRequest request = StatusRequest.newBuilder()
            .setAreaId(areaId)
            .setApiKey(apiKey) // add API Key
            .build();

        try {
        // Make server streaming request 
        lightingStub.streamLightStatus(request).forEachRemaining(status -> {
            String info = "Light ID: " + status.getLightId() +
                          ", Is On: " + status.getIsOn() +
                          ", Brightness: " + status.getBrightness() +
                          ", Status: " + status.getStatusMessage() + "\n";

            txtStatusStream.append(info);
            // Scroll to latest 
            txtStatusStream.setCaretPosition(txtStatusStream.getDocument().getLength());
        });
        } catch (Exception e) {
            txtStatusStream.setText("Error: " + e.getMessage());
            e.printStackTrace();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnStreamStatusActionPerformed

    private void btnAddBrightnessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBrightnessActionPerformed
        String lightId = txtBrightnessLightId.getText().trim();
        String brightnessStr = txtBrightnessLevel.getText().trim();
        String apiKey = txtApiKeyLighting.getText().trim(); // get api key

        if (lightId.isEmpty() || brightnessStr.isEmpty() || apiKey.isEmpty()) {
            txtBrightnessResponse.setText("Please enter Light ID, Brightness, and API Key.");
            return;
        }

         try {
             int brightness = Integer.parseInt(brightnessStr);

        // Create a BrightnessLevel request and add to the list
             BrightnessLevel request = BrightnessLevel.newBuilder()
                .setLightId(lightId)
                .setBrightness(brightness)
                .setApiKey(apiKey) //add API Key
                .build();

             brightnessRequests.add(request);
             txtBrightnessResponse.append("Added: " + lightId + " -> " + brightness + "\n");

       // Clear input fields 
             txtBrightnessLightId.setText("");
             txtBrightnessLevel.setText("");

        } catch (NumberFormatException e) {
            txtBrightnessResponse.setText("Brightness must be an integer");
        }                       
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddBrightnessActionPerformed

    private void btnSubmitBrightnessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitBrightnessActionPerformed
        if (brightnessRequests.isEmpty()) {
        txtBrightnessResponse.setText("Please add at least one brightness value before submitting.");
        return;
    }

    // Start a client streaming request 
        StreamObserver<BrightnessLevel> requestObserver = lightingAsyncStub.adjustBrightness(
            new StreamObserver<AdjustmentSummary>() {
                @Override
                public void onNext(AdjustmentSummary summary) {
                    txtBrightnessResponse.append("\n Total Adjusted: " + summary.getAdjustedCount()
                        + "\nAverage Brightness: " + summary.getAverageBrightness());
                }

                @Override
                public void onError(Throwable t) {
                    txtBrightnessResponse.setText(" Error occuree during submission: " + t.getMessage());
                }   

                @Override
                public void onCompleted() {
                    txtBrightnessResponse.append("\n Brightness adjustment completed");
                }
            }
        );

            // send all brightness level requests 
        for (BrightnessLevel req : brightnessRequests) {
            requestObserver.onNext(req);
        }

        requestObserver.onCompleted();

        // Clear the local cache
        brightnessRequests.clear();       
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSubmitBrightnessActionPerformed

    private void txtBrightnessLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBrightnessLevelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBrightnessLevelActionPerformed

    private void btnSendCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendCommandActionPerformed
        String lightId = txtLiveLightId.getText().trim();
        String command = txtLiveCommand.getText().trim();
        String apiKey = txtApiKeyLighting.getText().trim(); 

        if (lightId.isEmpty() || command.isEmpty()) {
            txtLiveFeedback.setText("Please enter Light ID, Command, and API Key");
            return;
        }

        // Initialize the bidirectional stream only once
        if (liveCommandStream == null) {
            liveCommandStream = lightingAsyncStub.liveLightingControl(new StreamObserver<LightingFeedback>() {
                @Override
                public void onNext(LightingFeedback feedback) {
                    txtLiveFeedback.append("Server feedback: \n"
                        + "Light ID: " + feedback.getLightId()
                        + ", State: " + feedback.getCurrentState()
                        + ", Accepted: " + feedback.getAccepted() + "\n\n");
                }

                @Override
                public void onError(Throwable t) {
                    txtLiveFeedback.setText("Error: " + t.getMessage());
                    liveCommandStream = null;
                }

                @Override
                public void onCompleted() {
                    txtLiveFeedback.append("Control session completed.\n");
                    liveCommandStream = null;
                }
            });
        }

        //build and send command
        LightingCommand lightingCommand = LightingCommand.newBuilder()
            .setLightId(lightId)
            .setCommand(command)
            .setApiKey(apiKey)
            .build();

        liveCommandStream.onNext(lightingCommand);

        // clear input 
        txtLiveCommand.setText("");  
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSendCommandActionPerformed

    private void txtLiveLightIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLiveLightIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLiveLightIdActionPerformed

    private void btnGetAirStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetAirStatusActionPerformed
       String location = txtLocationAQ.getText().trim(); 
       String apiKey = txtApiKeyAQ.getText().trim();    

        if (location.isEmpty()) {
            txtAirStatusResponse.setText("Please enter the city name");
            return;
        }
        if (apiKey.isEmpty()) {
            txtAirStatusResponse.setText("Please enter your API Key");
            return;
        }

        
        // build request object
        LocationRequest request = LocationRequest.newBuilder()
            .setCity(location)        
            .setDistrict("default")   
            .setApiKey(apiKey) // add api 
            .build();

        try {
            AirStatus response = airStub.getCurrentAirStatus(request);

            String result = String.format(
                "City: %s\n"
                        + "Time:%s\n"
                        + "Temperature:%.2f°C\n"
                        + "Humidity: %.2f%%\n"
                        + "PM2.5: %.2f\n"
                        + "CO₂: %.2f ppm\n "
                        + "Status: %s",
                location,
                response.getTimestamp(),
                response.getTemperature(),
                response.getHumidity(),
                response.getPm25(),
                response.getCo2(),
                response.getStatus()
            );

            txtAirStatusResponse.setText(result);
        } catch (Exception e) {
            txtAirStatusResponse.setText("Error: " + e.getMessage());
    }

       // TODO add your handling code here:
    }//GEN-LAST:event_btnGetAirStatusActionPerformed

    private void txtBrightnessLightIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBrightnessLightIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBrightnessLightIdActionPerformed

    private void btnStreamAirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStreamAirActionPerformed
        String city = txtStreamCity.getText().trim();
        String apiKey = txtApiKeyAQ.getText().trim(); 

        if (city.isEmpty()) {
            txtStreamAirResponse.setText("Please enter a city name!");
            return;
        }
        if (apiKey.isEmpty()) {
            txtStreamAirResponse.setText("Please enter an API Key!");
            return;
        }

        // build request 
        LocationRequest request = LocationRequest.newBuilder()
            .setCity(city)
            .setDistrict("stream-test") 
            .setApiKey(apiKey)          
            .build();

        // clear previous response 
        txtStreamAirResponse.setText("");

        try {
            // 使用 blocking stub 发起 server streaming
            airStub.streamAirQuality(request).forEachRemaining(status -> {
                String info = String.format(
                    "Time: %s\n"
                            + "Temp: %.2f°C\n"
                            + "Humidity: %.2f%%\n "
                            + "PM2.5: %.2f\n"
                            + "CO₂: %.2f ppm\n"
                            + "Status: %s\n\n",
                    status.getTimestamp(),
                    status.getTemperature(),
                    status.getHumidity(),
                    status.getPm25(),
                    status.getCo2(),
                    status.getStatus()
                );

                
                txtStreamAirResponse.append(info);
                txtStreamAirResponse.setCaretPosition(txtStreamAirResponse.getDocument().getLength());
            });
        } catch (Exception e) {
            txtStreamAirResponse.setText("❌ Error: " + e.getMessage());
    }        // TODO add your handling code here:
    }//GEN-LAST:event_btnStreamAirActionPerformed

    private void txtSensorCo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSensorCo2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSensorCo2ActionPerformed

    private void txtSensorPm25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSensorPm25ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSensorPm25ActionPerformed

    private void btnAddSensorReadingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSensorReadingActionPerformed
        try {
            float pm25 = Float.parseFloat(txtSensorPm25.getText().trim());
            float co2 = Float.parseFloat(txtSensorCo2.getText().trim());
            String apiKey = txtApiKeyAQ.getText().trim(); 
             if (apiKey.isEmpty()) {
                txtSensorUploadResponse.setText("Please enter the API Key!");
                return;
            }

            SensorReading reading = SensorReading.newBuilder()
                .setPm25(pm25)
                .setCo2(co2)
                .setTemperature(0) 
                .setHumidity(0)
                .setApiKey(apiKey) 
                .build();
            
            // add to local cache
            sensorReadings.add(reading); 
            
            
            txtSensorUploadResponse.append("Added: PM2.5 = " + pm25 + ", CO₂ = " + co2 + "\n");

            // clear to input fields
            txtSensorPm25.setText("");
            txtSensorCo2.setText("");

        } catch (NumberFormatException e) {
            txtSensorUploadResponse.setText("Please enter valid numbers!");
    }       // TODO add your handling code here:
    }//GEN-LAST:event_btnAddSensorReadingActionPerformed

    private void btnSubmitSensorReadingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitSensorReadingsActionPerformed

        System.out.println("Submit button clicked!");

        if (sensorReadings == null || sensorReadings.isEmpty()) {
            txtSensorUploadResponse.setText("Please add at least one sensor reading before submitting!");
            return;
        }
        String apiKey = txtApiKeyAQ.getText().trim(); 
        if (apiKey.isEmpty()) {
            txtSensorUploadResponse.setText("Please enter the Api Key before submitting!");
            return;
        }

        try {
            // Define the response handler for the server
            StreamObserver<SensorReport> responseObserver = new StreamObserver<SensorReport>() {
                @Override
                public void onNext(SensorReport report) {
                    txtSensorUploadResponse.append(
                        "\nTotal reading : " + report.getTotalReadings()
                        + "\nAverage PM2.5: " + report.getAvgPm25()
                        + "\nAverage CO₂: " + report.getAvgCo2()
                        + "\nSummary: " + report.getQualitySummary() + "\n"
                    );
                    System.out.println("Report received: " + report.getTotalReadings() + " entries");
                }

                @Override
                public void onError(Throwable t) {
                    txtSensorUploadResponse.setText("Error: " + t.getMessage());
                    t.printStackTrace();
                }

                @Override
                public void onCompleted() {
                    txtSensorUploadResponse.append("Upload completed.\n");
                }
            };

            // Create the request stream using the async stub
            StreamObserver<SensorReading> requestObserver = airAsyncStub.uploadSensorData(responseObserver);

            // Send each sensor reading in the list
            for (SensorReading reading : sensorReadings) {
                System.out.println("Sending data PM2.5: " + reading.getPm25() + ", CO2: " + reading.getCo2());
                requestObserver.onNext(reading);
            }

            // Mark the end of client streaming
            requestObserver.onCompleted();

            // Clear the local cache
            sensorReadings.clear();
            txtSensorUploadResponse.append("Local cache cleared after submission.\n");

        } catch (Exception e) {
            e.printStackTrace();
            txtSensorUploadResponse.setText("Submission failed" + e.getMessage());
        }     
    }//GEN-LAST:event_btnSubmitSensorReadingsActionPerformed

    private void btnSendLiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendLiveActionPerformed
        try {
            float temp = Float.parseFloat(txtLiveTemp.getText().trim());
            float hum = Float.parseFloat(txtLiveHum.getText().trim());
            float pm25 = Float.parseFloat(txtLivePm25.getText().trim());
            float co2 = Float.parseFloat(txtLiveCo2.getText().trim());
            String apiKey = txtApiKeyAQ.getText().trim();
            
            if (apiKey.isEmpty()) {
                txtLiveResponse.setText("Please enter a valid API Key.");
                return;
            }

            
            if (liveSensorStream == null) {
                liveSensorStream = airAsyncStub.liveMonitoring(new StreamObserver<AirStatus>() {
                    @Override
                    public void onNext(AirStatus status) {
                        String result = String.format(
                            "Server Response:\n🕒 %s\n"
                             + "Temp: %.1f°C\n"
                             + "Humidity: %.1f%%\n"
                             + "PM2.5: %.1f\n"
                             + "CO₂: %.1f\n"
                             + "Status: %s\n\n",
                            status.getTimestamp(),
                            status.getTemperature(),
                            status.getHumidity(),
                            status.getPm25(),
                            status.getCo2(),
                            status.getStatus()
                        );
                        txtLiveResponse.append(result);
                        txtLiveResponse.setCaretPosition(txtLiveResponse.getDocument().getLength());
                    }

                    @Override
                    public void onError(Throwable t) {
                        txtLiveResponse.setText("Live stream error: " + t.getMessage());
                        liveSensorStream = null;
                    }

                    @Override
                    public void onCompleted() {
                        txtLiveResponse.append("Live monitoring session ended.\n");
                        liveSensorStream = null;
                    }
                });
            }

            // build and send reading 
            SensorReading reading = SensorReading.newBuilder()
                .setTemperature(temp)
                .setHumidity(hum)
                .setPm25(pm25)
                .setCo2(co2)
                .setApiKey(apiKey)
                .build();

            liveSensorStream.onNext(reading);

            // clear input fields
            txtLiveTemp.setText("");
            txtLiveHum.setText("");
            txtLivePm25.setText("");
            txtLiveCo2.setText("");

        } catch (NumberFormatException e) {
            txtLiveResponse.setText("Please enter valid numeric values!");
    
        }                
            // TODO add your handling code here:
    }//GEN-LAST:event_btnSendLiveActionPerformed

    private void cmbPriorityUnaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPriorityUnaryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbPriorityUnaryActionPerformed

    private void btnSendMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendMessageActionPerformed
        String screenId = txtScreenIdUnary.getText().trim();
        String content = txtContentUnary.getText().trim();
        String priority = cmbPriorityUnary.getSelectedItem().toString();
        String apiKey = txtApiKeyPD.getText().trim(); 
        
        if (screenId.isEmpty() || content.isEmpty() || apiKey.isEmpty()) {
            txtUnaryResponse.setText("Please enter Screen ID, Message Content, and API Key.");
            return;
        }


        DisplayMessage request = DisplayMessage.newBuilder()
            .setMessageId("msg-" + System.currentTimeMillis())
            .setScreenId(screenId)
            .setContent(content)
            .setPriority(priority)
            .setApiKey(apiKey) 
            .build();

        publicAsyncStub.sendMessage(request, new StreamObserver<DisplayAck>() {
            @Override
            public void onNext(DisplayAck ack) {
                txtUnaryResponse.setText("Success: " + ack.getSuccess() + "\nInformation: " + ack.getConfirmation());
            }

            @Override
            public void onError(Throwable t) {
                txtUnaryResponse.setText("Error: " + t.getMessage());
            }

            @Override
            public void onCompleted() {
                
            }
        });        
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSendMessageActionPerformed

    private void btnAddToBatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToBatchActionPerformed
        String screenId = txtStreamScreenId.getText().trim();
        String content = txtStreamContent.getText().trim();
        String priority = cmbStreamPriority.getSelectedItem().toString();
        String apiKey = txtApiKeyPD.getText().trim();  
        
        if (screenId.isEmpty() || content.isEmpty() || apiKey.isEmpty()) {
            txtStreamResponse.setText("Please provide Screen ID, Message Content, and API Key.");
            return;
        }
        

        DisplayMessage msg = DisplayMessage.newBuilder()
            .setMessageId("msg-" + System.currentTimeMillis())
            .setScreenId(screenId)
            .setContent(content)
            .setPriority(priority)
            .setApiKey(apiKey)
            .build();

        displayBatch.add(msg);
        txtStreamResponse.append("Message added to batch: " + content + "\n");

        txtStreamScreenId.setText("");
        txtStreamContent.setText("");       
    }//GEN-LAST:event_btnAddToBatchActionPerformed

    private void btnSubmitBatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitBatchActionPerformed
        if (displayBatch.isEmpty()) {
            txtStreamResponse.append("No Messages to submit. Please add some first!\n");
            return;
        }
        String apiKey = txtApiKeyPD.getText().trim();
        if (apiKey.isEmpty()) {
                txtStreamResponse.append("Please enter the API Key before submitting.\n");
                return;
        }

        StreamObserver<DisplaySummary> responseObserver = new StreamObserver<DisplaySummary>() {
            @Override
            public void onNext(DisplaySummary summary) {
                txtStreamResponse.append("\nTotal Messages: " + summary.getTotalMessages()
                    + "\nSuccessfully displayed: " + summary.getSuccessfulDisplays()
                    + "\nSummary: " + summary.getSummaryNote() + "\n");
            }

            @Override
            public void onError(Throwable t) {
                txtStreamResponse.setText("Submission failed " + t.getMessage());
            }

            @Override
            public void onCompleted() {
                txtStreamResponse.append("Batch submission complete\n");
                displayBatch.clear();
            }
        };

        StreamObserver<DisplayMessage> requestObserver = publicAsyncStub.streamMessages(responseObserver);

        for (DisplayMessage original : displayBatch) {
            DisplayMessage withKey = DisplayMessage.newBuilder(original)
                .setApiKey(apiKey) 
                .build();
            requestObserver.onNext(withKey);
        }

        requestObserver.onCompleted();        
    }//GEN-LAST:event_btnSubmitBatchActionPerformed

    private void btnSendLiveDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendLiveDisplayActionPerformed
        String screenId = txtLiveScreenId.getText().trim();
        String content = txtLiveContent.getText().trim();
        String priority = cmbLivePriority.getSelectedItem().toString();
        String apiKey = txtApiKeyPD.getText().trim(); 
        
        
        if (screenId.isEmpty() || content.isEmpty() || apiKey.isEmpty()) {
            txtLiveDisplayResponse.setText("Please enter Screen ID, Content, and API Key.");
            return;
        }
        

        if (liveDisplayStream == null) {
            // Initialize live stream only once 
            liveDisplayStream = publicAsyncStub.realTimeDisplay(new StreamObserver<DisplayStatus>() {
                @Override
                public void onNext(DisplayStatus status) {
                    txtLiveDisplayResponse.append("Screen: " + status.getScreenId()
                        + " --Status: " + status.getStatusNote() + "\n");
                }

                @Override
                public void onError(Throwable t) {
                    txtLiveDisplayResponse.setText("Error: " + t.getMessage());
                    liveDisplayStream = null;
                }

                @Override
                public void onCompleted() {
                    txtLiveDisplayResponse.append("Real-time display session ended.\n");
                    liveDisplayStream = null;
                }
            });
        }
        
        // send the message to the server 

        DisplayMessage msg = DisplayMessage.newBuilder()
            .setMessageId("msg-" + System.currentTimeMillis())
            .setScreenId(screenId)
            .setContent(content)
            .setPriority(priority)
            .setApiKey(apiKey) 
            .build();

        liveDisplayStream.onNext(msg);

        txtLiveContent.setText("");        
    }//GEN-LAST:event_btnSendLiveDisplayActionPerformed

    private void txtContentUnaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtContentUnaryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtContentUnaryActionPerformed

    private void txtApiKeyLightingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtApiKeyLightingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtApiKeyLightingActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SmartCityClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SmartCityClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SmartCityClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SmartCityClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SmartCityClientGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane SmartCitySys;
    private javax.swing.JLabel blbLiveCo2;
    private javax.swing.JButton btnAddBrightness;
    private javax.swing.JButton btnAddSensorReading;
    private javax.swing.JButton btnAddToBatch;
    private javax.swing.JButton btnGetAirStatus;
    private javax.swing.JButton btnSendCommand;
    private javax.swing.JButton btnSendLive;
    private javax.swing.JButton btnSendLiveDisplay;
    private javax.swing.JButton btnSendMessage;
    private javax.swing.JButton btnStreamAir;
    private javax.swing.JButton btnStreamStatus;
    private javax.swing.JButton btnSubmitBatch;
    private javax.swing.JButton btnSubmitBrightness;
    private javax.swing.JButton btnSubmitSensorReadings;
    private javax.swing.JButton btnTurnOnLight;
    private javax.swing.JComboBox<String> cmbLivePriority;
    private javax.swing.JComboBox<String> cmbPriorityUnary;
    private javax.swing.JComboBox<String> cmbStreamPriority;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelApiKeyAQ;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lblAreaId;
    private javax.swing.JLabel lblBrightness;
    private javax.swing.JLabel lblBrightnessLightId;
    private javax.swing.JLabel lblLightID;
    private javax.swing.JLabel lblLiveCmd;
    private javax.swing.JLabel lblLiveFeedback;
    private javax.swing.JLabel lblLiveHum;
    private javax.swing.JLabel lblLiveId;
    private javax.swing.JLabel lblLivePm25;
    private javax.swing.JLabel lblLiveTemp;
    private javax.swing.JLabel lblLocation;
    private javax.swing.JLabel lblLocationAQ;
    private javax.swing.JLabel lblResponse;
    private javax.swing.JLabel lblSensorCo2;
    private javax.swing.JLabel lblSensorPm25;
    private javax.swing.JLabel lblStreamCity;
    private javax.swing.JPanel lightingPanel;
    private javax.swing.JTextArea txtAirStatusResponse;
    private javax.swing.JTextField txtApiKeyAQ;
    private javax.swing.JTextField txtApiKeyLighting;
    private javax.swing.JTextField txtApiKeyPD;
    private javax.swing.JTextField txtAreaId;
    private javax.swing.JTextField txtBrightnessLevel;
    private javax.swing.JTextField txtBrightnessLightId;
    private javax.swing.JTextArea txtBrightnessResponse;
    private javax.swing.JTextField txtContentUnary;
    private javax.swing.JTextField txtLightIdUnary;
    private javax.swing.JTextField txtLiveCo2;
    private javax.swing.JTextField txtLiveCommand;
    private javax.swing.JTextField txtLiveContent;
    private javax.swing.JTextArea txtLiveDisplayResponse;
    private javax.swing.JTextArea txtLiveFeedback;
    private javax.swing.JTextField txtLiveHum;
    private javax.swing.JTextField txtLiveLightId;
    private javax.swing.JTextField txtLivePm25;
    private javax.swing.JTextArea txtLiveResponse;
    private javax.swing.JTextField txtLiveScreenId;
    private javax.swing.JTextField txtLiveTemp;
    private javax.swing.JTextField txtLocationAQ;
    private javax.swing.JTextField txtLocationUnary;
    private javax.swing.JTextArea txtResponseUnary;
    private javax.swing.JTextField txtScreenIdUnary;
    private javax.swing.JTextField txtSensorCo2;
    private javax.swing.JTextField txtSensorPm25;
    private javax.swing.JTextArea txtSensorUploadResponse;
    private javax.swing.JTextArea txtStatusStream;
    private javax.swing.JTextArea txtStreamAirResponse;
    private javax.swing.JTextField txtStreamCity;
    private javax.swing.JTextField txtStreamContent;
    private javax.swing.JTextArea txtStreamResponse;
    private javax.swing.JTextField txtStreamScreenId;
    private javax.swing.JTextArea txtUnaryResponse;
    // End of variables declaration//GEN-END:variables
}
